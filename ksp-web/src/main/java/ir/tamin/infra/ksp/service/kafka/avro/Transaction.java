/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ir.tamin.infra.ksp.service.kafka.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Transaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -154272449948788679L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Transaction\",\"namespace\":\"ir.tamin.infra.ksp.service.kafka.avro\",\"fields\":[{\"name\":\"guid\",\"type\":\"string\",\"doc\":\"The unique transaction guid\"},{\"name\":\"account\",\"type\":\"string\",\"doc\":\"Account name\",\"avro.java.string\":\"java.lang.String\"},{\"name\":\"amount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":9,\"scale\":2}},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"TransactionType\",\"symbols\":[\"DEPOSIT\",\"WITHDRAW\"]}},{\"name\":\"currency\",\"type\":\"string\",\"doc\":\"Transaction currency\"},{\"name\":\"country\",\"type\":\"string\",\"doc\":\"Transaction country\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<Transaction> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Transaction> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Transaction> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Transaction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Transaction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Transaction to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Transaction from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Transaction instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Transaction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The unique transaction guid */
  private java.lang.CharSequence guid;
  /** Account name */
  private java.lang.CharSequence account;
  private java.nio.ByteBuffer amount;
  private ir.tamin.infra.ksp.service.kafka.avro.TransactionType type;
  /** Transaction currency */
  private java.lang.CharSequence currency;
  /** Transaction country */
  private java.lang.CharSequence country;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Transaction() {}

  /**
   * All-args constructor.
   * @param guid The unique transaction guid
   * @param account Account name
   * @param amount The new value for amount
   * @param type The new value for type
   * @param currency Transaction currency
   * @param country Transaction country
   */
  public Transaction(java.lang.CharSequence guid, java.lang.CharSequence account, java.nio.ByteBuffer amount, ir.tamin.infra.ksp.service.kafka.avro.TransactionType type, java.lang.CharSequence currency, java.lang.CharSequence country) {
    this.guid = guid;
    this.account = account;
    this.amount = amount;
    this.type = type;
    this.currency = currency;
    this.country = country;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return guid;
    case 1: return account;
    case 2: return amount;
    case 3: return type;
    case 4: return currency;
    case 5: return country;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: guid = (java.lang.CharSequence)value$; break;
    case 1: account = (java.lang.CharSequence)value$; break;
    case 2: amount = (java.nio.ByteBuffer)value$; break;
    case 3: type = (ir.tamin.infra.ksp.service.kafka.avro.TransactionType)value$; break;
    case 4: currency = (java.lang.CharSequence)value$; break;
    case 5: country = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'guid' field.
   * @return The unique transaction guid
   */
  public java.lang.CharSequence getGuid() {
    return guid;
  }


  /**
   * Sets the value of the 'guid' field.
   * The unique transaction guid
   * @param value the value to set.
   */
  public void setGuid(java.lang.CharSequence value) {
    this.guid = value;
  }

  /**
   * Gets the value of the 'account' field.
   * @return Account name
   */
  public java.lang.CharSequence getAccount() {
    return account;
  }


  /**
   * Sets the value of the 'account' field.
   * Account name
   * @param value the value to set.
   */
  public void setAccount(java.lang.CharSequence value) {
    this.account = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.nio.ByteBuffer getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.nio.ByteBuffer value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public ir.tamin.infra.ksp.service.kafka.avro.TransactionType getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(ir.tamin.infra.ksp.service.kafka.avro.TransactionType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return Transaction currency
   */
  public java.lang.CharSequence getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * Transaction currency
   * @param value the value to set.
   */
  public void setCurrency(java.lang.CharSequence value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return Transaction country
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * Transaction country
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Creates a new Transaction RecordBuilder.
   * @return A new Transaction RecordBuilder
   */
  public static ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder newBuilder() {
    return new ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder();
  }

  /**
   * Creates a new Transaction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Transaction RecordBuilder
   */
  public static ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder newBuilder(ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder other) {
    if (other == null) {
      return new ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder();
    } else {
      return new ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder(other);
    }
  }

  /**
   * Creates a new Transaction RecordBuilder by copying an existing Transaction instance.
   * @param other The existing instance to copy.
   * @return A new Transaction RecordBuilder
   */
  public static ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder newBuilder(ir.tamin.infra.ksp.service.kafka.avro.Transaction other) {
    if (other == null) {
      return new ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder();
    } else {
      return new ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder(other);
    }
  }

  /**
   * RecordBuilder for Transaction instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Transaction>
    implements org.apache.avro.data.RecordBuilder<Transaction> {

    /** The unique transaction guid */
    private java.lang.CharSequence guid;
    /** Account name */
    private java.lang.CharSequence account;
    private java.nio.ByteBuffer amount;
    private ir.tamin.infra.ksp.service.kafka.avro.TransactionType type;
    /** Transaction currency */
    private java.lang.CharSequence currency;
    /** Transaction country */
    private java.lang.CharSequence country;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.guid)) {
        this.guid = data().deepCopy(fields()[0].schema(), other.guid);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.account)) {
        this.account = data().deepCopy(fields()[1].schema(), other.account);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.currency)) {
        this.currency = data().deepCopy(fields()[4].schema(), other.currency);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.country)) {
        this.country = data().deepCopy(fields()[5].schema(), other.country);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Transaction instance
     * @param other The existing instance to copy.
     */
    private Builder(ir.tamin.infra.ksp.service.kafka.avro.Transaction other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.guid)) {
        this.guid = data().deepCopy(fields()[0].schema(), other.guid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.account)) {
        this.account = data().deepCopy(fields()[1].schema(), other.account);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.currency)) {
        this.currency = data().deepCopy(fields()[4].schema(), other.currency);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.country)) {
        this.country = data().deepCopy(fields()[5].schema(), other.country);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'guid' field.
      * The unique transaction guid
      * @return The value.
      */
    public java.lang.CharSequence getGuid() {
      return guid;
    }


    /**
      * Sets the value of the 'guid' field.
      * The unique transaction guid
      * @param value The value of 'guid'.
      * @return This builder.
      */
    public ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder setGuid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.guid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'guid' field has been set.
      * The unique transaction guid
      * @return True if the 'guid' field has been set, false otherwise.
      */
    public boolean hasGuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'guid' field.
      * The unique transaction guid
      * @return This builder.
      */
    public ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder clearGuid() {
      guid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'account' field.
      * Account name
      * @return The value.
      */
    public java.lang.CharSequence getAccount() {
      return account;
    }


    /**
      * Sets the value of the 'account' field.
      * Account name
      * @param value The value of 'account'.
      * @return This builder.
      */
    public ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder setAccount(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.account = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'account' field has been set.
      * Account name
      * @return True if the 'account' field has been set, false otherwise.
      */
    public boolean hasAccount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'account' field.
      * Account name
      * @return This builder.
      */
    public ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder clearAccount() {
      account = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder setAmount(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public ir.tamin.infra.ksp.service.kafka.avro.TransactionType getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder setType(ir.tamin.infra.ksp.service.kafka.avro.TransactionType value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * Transaction currency
      * @return The value.
      */
    public java.lang.CharSequence getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * Transaction currency
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder setCurrency(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.currency = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * Transaction currency
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'currency' field.
      * Transaction currency
      * @return This builder.
      */
    public ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * Transaction country
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * Transaction country
      * @param value The value of 'country'.
      * @return This builder.
      */
    public ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.country = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * Transaction country
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'country' field.
      * Transaction country
      * @return This builder.
      */
    public ir.tamin.infra.ksp.service.kafka.avro.Transaction.Builder clearCountry() {
      country = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Transaction build() {
      try {
        Transaction record = new Transaction();
        record.guid = fieldSetFlags()[0] ? this.guid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.account = fieldSetFlags()[1] ? this.account : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.amount = fieldSetFlags()[2] ? this.amount : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        record.type = fieldSetFlags()[3] ? this.type : (ir.tamin.infra.ksp.service.kafka.avro.TransactionType) defaultValue(fields()[3]);
        record.currency = fieldSetFlags()[4] ? this.currency : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.country = fieldSetFlags()[5] ? this.country : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Transaction>
    WRITER$ = (org.apache.avro.io.DatumWriter<Transaction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Transaction>
    READER$ = (org.apache.avro.io.DatumReader<Transaction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










